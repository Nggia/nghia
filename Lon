#include <SFML/Graphics.hpp>
#include <cmath>

class Tween {
public:
    Tween(sf::Vector2f& target, sf::Vector2f start, float duration, float delay = 0.0f)
        : m_target(target), m_start(start), m_duration(duration), m_delay(delay), m_elapsed(0.0f) {}

    void update(float dt) {
        if (m_elapsed < m_delay) {
            m_elapsed += dt;
            return;
        }

        m_elapsed += dt;
        if (m_elapsed >= m_duration) {
            m_elapsed = m_duration;
        }

        float t = m_elapsed / m_duration;
        float x = m_start.x + (m_target.x - m_start.x) * t;
        float y = m_start.y + (m_target.y - m_start.y) * t;
        m_target.x = x;
        m_target.y = y;
    }

private:
    sf::Vector2f& m_target;
    sf::Vector2f m_start;
    float m_duration;
    float m_delay;
    float m_elapsed;
};

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Tween Example");
    sf::CircleShape player(50.0f);
    player.setFillColor(sf::Color::White);
    player.setPosition(400.0f, 300.0f);

    sf::Vector2f targetPosition(600.0f, 400.0f);
    Tween tween(player.getPosition(), targetPosition, 2.0f, 1.0f);

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
        }

        tween.update(window.getFrameTime() / 1000.0f);

        window.clear();
        window.draw(player);
        window.display();
    }

    return 0;
}

